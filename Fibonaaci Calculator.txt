                          ---DICRETE STRUCTURES---  
                        ----SHOW & TELL ACTIVITY----    
            
                                ---AGENDA---
    1. Introduction to Fibonacci Sequence,  it‚Äôs  revelation and applications.
    2. Fibonacci  Calculator,  it‚Äôs  Iterative   and  Recursive  approach,  and  their 
       contiguous comparison.
    3. Advantages & Disadvantages of both approaches. Their  Time  Complexities,  best
       approach etc.
    4. Real life Applications of Fibonacci Calculator 
    5. Conclusions.
            

                       ---Fibonacci Sequence Calculator---

    A Fibonacci Sequence Calculator is a tool used to calculate Fibonacci numbers. The
    Fibonacci sequence is a series of numbers where each number is the sum of the  two 
    preceding ones, usually starting with 0 and 1. The  sequence goes like this: 0, 1, 
    1, 2, 3, 5, 8, 13, 21, and so on.

                               ---APPROACHES---
    1. Recursive Approach:
       The recursive approach is the most straightforward  way  to  calculate Fibonacci
       numbers. It involves defining  a  function  that  calls itself  to calculate the 
       Fibonacci number.

       Explanation:
       Base Cases: The first two Fibonacci numbers are defined as 

                   ùêπ(0) = 0 and ùêπ(1) = 1.

       Recursive Case: For ùëõ ‚â• 2, the Fibonacci number is calculated as 

                   ùêπ(ùëõ) = ùêπ (ùëõ‚àí1) + ùêπ(ùëõ‚àí2).
        
         Alogrithm: 
         _______________________________________________________
        |                                                       |
        | procedure fibonacci(n: nonnegative integer)           |
        |                                                       |
        |  if n = 0then return 0                                |
        |  else if n = 1 then return 1                          |
        |  else return fibonacci(n ‚àí 1) + fibonacci(n ‚àí 2)      |
        |  {output is fibonacci(n)}                             | 
        |_______________________________________________________|


    2. Iterative Approach
       The iterative approach uses a loop to calculate Fibonacci numbers iteratively.

       Explanation:
       Initialization: Start with the first two Fibonacci numbers, 
               ùëé = 0  and  
               ùëè = 1.

       Iteration: Use a loop to calculate subsequent Fibonacci numbers  by summing  the 
       previous two numbers and updating the variables accordingly.

       Alogrithm:
       ___________________________________________________________
      |                                                           |
      |    procedure iterative fibonacci(n: nonnegative integer)  |
      |                                                           |
      |   if n = 0, then return 0                                 |
      |   else                                                    |
      |   x := 0                                                  |
      |   y := 1                                                  |
      |   for i := 1 to n‚àí1                                       |
      |   z := x +y                                               |
      |   x := y                                                  |
      |   y := z                                                  |
      |                                                           |
      |   return y                                                |
      |   {output is the nth Fibonacci number}                    |
      |___________________________________________________________|

                          ---Advantages & Disadvantages---

   ‚Ä¢ Recursive Method: 
     1.Advantages:
       o Elegant and Readable: Matches the mathematical definition, making it intuitive. 
       o Modular Design: Code is simple for smaller inputs and easy to modify. 
       o Optimization Potential: Can be improved with memoization for better efficiency.

     2.Disadvantages:
      o Inefficient Without Optimization: High time complexity (O(2^n)) without memoization,
        leading to slow performance for large inputs. 
      o High Memory Usage: Consumes more memory due to the call stack (O(n) space). 
      o Risk of Stack Overflow: Large inputs can cause stack overflow errors.


    ‚Ä¢ Iterative Method: 
    1.Advantages:
      o High Efficiency: Faster execution,  especially  for  large  inputs  due  to  reduced 
        function call overhead. 
      o Low Memory Usage: Uses constant space (O(1)) without additional stack memory. 
      o Robust for Large Inputs: No risk of stack overflow,  making  it  suitable  for  high 
        values of n.
    2.Disadvantges:
  
      o Less Intuitive: Doesn‚Äôt match the natural  recursive  definition,  making  the  logic 
        harder to follow. 
      o Manual Optimization Required: Advanced  techniques   (like memoization) can be harder 
        to implement. 
      o Code Complexity for Complex Variants:  Implementing  complex  versions  may  increase
        code complexity.    


                             ---REAL LIFE APPLICATIONS---
                             
    1. Fibonacci Retracement: Traders use Fibonacci retracement levels to identify potential
       support and resistance levels in stock prices. This helps in making informed  trading 
       decisions by predicting potential price reversals.

 
    2.Growth Patterns: In biology, researchers use  the  Fibonacci sequence to  study growth 
      patterns in plants and animals. This includes analyzing the arrangement of leaves, the
      branching of trees, and the patterns of pine cones and flower petals.


    3.Design and Aesthetics: Architects and artists use  the  Fibonacci  sequence  to  create
      aesthetically pleasing designs. The golden ratio,  derived from the Fibonacci sequence, 
      is used to achieve balance and harmony in structures and artworks.


    4.Algorithm Optimization: In  Computer Science,  Fibonacci numbers are used in algorithms
      and data  structures. Fibonacci  heaps, for instance,  are used in network optimization
      algorithms due to their efficient merging properties.

    5.Recursive Algorithms: Fibonacci  sequences   help  in  understanding  and  implementing 
      recursive algorithms, which are fundamental in computer programming.


    6.Compositional Structures:  Musicians use the  Fibonacci  sequence  to  structure  their 
      compositions. The timing of notes and  the organization of musical phrases often follow 
      Fibonacci ratios to create harmonious and natural-sounding music.


    7.Modeling Population Growth: Biologists  use  Fibonacci Sequences to model the growth of
      populations under ideal conditions. This includes studying how populations  of  certain 
      animals, like rabbits, grow over time.


    8.Random Number Generation: Fibonacci sequences can be used in cryptographic  algorithms 
      to generate pseudo-random numbers, enhancing the security of encrypted communications.

    
    9.Teaching Tool: Educators use Fibonacci calculators to teach mathematical concepts such
      as sequences, recursion,  and  algorithmic  thinking. It helps students understand the
      practical applications of mathematical theories.
                            
